// Code generated by MockGen. DO NOT EDIT.
// Source: register.go
//
// Generated by this command:
//
//	mockgen -source=register.go -destination=./mock/register.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	domain "adaptive-mfa/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIRegisterController is a mock of IRegisterController interface.
type MockIRegisterController struct {
	ctrl     *gomock.Controller
	recorder *MockIRegisterControllerMockRecorder
}

// MockIRegisterControllerMockRecorder is the mock recorder for MockIRegisterController.
type MockIRegisterControllerMockRecorder struct {
	mock *MockIRegisterController
}

// NewMockIRegisterController creates a new mock instance.
func NewMockIRegisterController(ctrl *gomock.Controller) *MockIRegisterController {
	mock := &MockIRegisterController{ctrl: ctrl}
	mock.recorder = &MockIRegisterControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRegisterController) EXPECT() *MockIRegisterControllerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockIRegisterController) Register(arg0 context.Context, arg1 *domain.RegisterRequest) (*domain.RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*domain.RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIRegisterControllerMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIRegisterController)(nil).Register), arg0, arg1)
}
