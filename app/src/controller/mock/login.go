// Code generated by MockGen. DO NOT EDIT.
// Source: login.go
//
// Generated by this command:
//
//	mockgen -source=login.go -destination=./mock/login.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	domain "adaptive-mfa/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockILoginController is a mock of ILoginController interface.
type MockILoginController struct {
	ctrl     *gomock.Controller
	recorder *MockILoginControllerMockRecorder
}

// MockILoginControllerMockRecorder is the mock recorder for MockILoginController.
type MockILoginControllerMockRecorder struct {
	mock *MockILoginController
}

// NewMockILoginController creates a new mock instance.
func NewMockILoginController(ctrl *gomock.Controller) *MockILoginController {
	mock := &MockILoginController{ctrl: ctrl}
	mock.recorder = &MockILoginControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoginController) EXPECT() *MockILoginControllerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockILoginController) Login(arg0 context.Context, arg1 *domain.LoginRequest) (*domain.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*domain.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockILoginControllerMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockILoginController)(nil).Login), arg0, arg1)
}

// LoginWithMFA mocks base method.
func (m *MockILoginController) LoginWithMFA(arg0 context.Context, arg1 *domain.LoginWithMFARequest) (*domain.LoginWithMFAResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithMFA", arg0, arg1)
	ret0, _ := ret[0].(*domain.LoginWithMFAResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithMFA indicates an expected call of LoginWithMFA.
func (mr *MockILoginControllerMockRecorder) LoginWithMFA(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithMFA", reflect.TypeOf((*MockILoginController)(nil).LoginWithMFA), arg0, arg1)
}

// SendLoginEmailCode mocks base method.
func (m *MockILoginController) SendLoginEmailCode(arg0 context.Context, arg1 *domain.SendLoginEmailCodeRequest) (*domain.SendLoginEmailCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLoginEmailCode", arg0, arg1)
	ret0, _ := ret[0].(*domain.SendLoginEmailCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendLoginEmailCode indicates an expected call of SendLoginEmailCode.
func (mr *MockILoginControllerMockRecorder) SendLoginEmailCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLoginEmailCode", reflect.TypeOf((*MockILoginController)(nil).SendLoginEmailCode), arg0, arg1)
}

// SendLoginPhoneCode mocks base method.
func (m *MockILoginController) SendLoginPhoneCode(arg0 context.Context, arg1 *domain.SendLoginPhoneCodeRequest) (*domain.SendLoginPhoneCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendLoginPhoneCode", arg0, arg1)
	ret0, _ := ret[0].(*domain.SendLoginPhoneCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendLoginPhoneCode indicates an expected call of SendLoginPhoneCode.
func (mr *MockILoginControllerMockRecorder) SendLoginPhoneCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLoginPhoneCode", reflect.TypeOf((*MockILoginController)(nil).SendLoginPhoneCode), arg0, arg1)
}

// VerifyLoginEmailCode mocks base method.
func (m *MockILoginController) VerifyLoginEmailCode(arg0 context.Context, arg1 *domain.VerifyLoginEmailCodeRequest) (*domain.VerifyLoginEmailCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyLoginEmailCode", arg0, arg1)
	ret0, _ := ret[0].(*domain.VerifyLoginEmailCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyLoginEmailCode indicates an expected call of VerifyLoginEmailCode.
func (mr *MockILoginControllerMockRecorder) VerifyLoginEmailCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyLoginEmailCode", reflect.TypeOf((*MockILoginController)(nil).VerifyLoginEmailCode), arg0, arg1)
}

// VerifyLoginPhoneCode mocks base method.
func (m *MockILoginController) VerifyLoginPhoneCode(arg0 context.Context, arg1 *domain.VerifyLoginPhoneCodeRequest) (*domain.VerifyLoginPhoneCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyLoginPhoneCode", arg0, arg1)
	ret0, _ := ret[0].(*domain.VerifyLoginPhoneCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyLoginPhoneCode indicates an expected call of VerifyLoginPhoneCode.
func (mr *MockILoginControllerMockRecorder) VerifyLoginPhoneCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyLoginPhoneCode", reflect.TypeOf((*MockILoginController)(nil).VerifyLoginPhoneCode), arg0, arg1)
}
