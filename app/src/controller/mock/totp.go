// Code generated by MockGen. DO NOT EDIT.
// Source: totp.go
//
// Generated by this command:
//
//	mockgen -source=totp.go -destination=./mock/totp.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	domain "adaptive-mfa/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockITOTPController is a mock of ITOTPController interface.
type MockITOTPController struct {
	ctrl     *gomock.Controller
	recorder *MockITOTPControllerMockRecorder
}

// MockITOTPControllerMockRecorder is the mock recorder for MockITOTPController.
type MockITOTPControllerMockRecorder struct {
	mock *MockITOTPController
}

// NewMockITOTPController creates a new mock instance.
func NewMockITOTPController(ctrl *gomock.Controller) *MockITOTPController {
	mock := &MockITOTPController{ctrl: ctrl}
	mock.recorder = &MockITOTPControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITOTPController) EXPECT() *MockITOTPControllerMockRecorder {
	return m.recorder
}

// AddTOTPMethod mocks base method.
func (m *MockITOTPController) AddTOTPMethod(ctx context.Context, req *domain.AddTOTPMethodRequest) (*domain.AddTOTPMethodResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTOTPMethod", ctx, req)
	ret0, _ := ret[0].(*domain.AddTOTPMethodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTOTPMethod indicates an expected call of AddTOTPMethod.
func (mr *MockITOTPControllerMockRecorder) AddTOTPMethod(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTOTPMethod", reflect.TypeOf((*MockITOTPController)(nil).AddTOTPMethod), ctx, req)
}

// DeleteTOTPMethod mocks base method.
func (m *MockITOTPController) DeleteTOTPMethod(ctx context.Context) (*domain.DeleteTOTPMethodResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTOTPMethod", ctx)
	ret0, _ := ret[0].(*domain.DeleteTOTPMethodResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTOTPMethod indicates an expected call of DeleteTOTPMethod.
func (mr *MockITOTPControllerMockRecorder) DeleteTOTPMethod(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTOTPMethod", reflect.TypeOf((*MockITOTPController)(nil).DeleteTOTPMethod), ctx)
}

// ListTOTPMethods mocks base method.
func (m *MockITOTPController) ListTOTPMethods(ctx context.Context) (*domain.ListTOTPMethodsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTOTPMethods", ctx)
	ret0, _ := ret[0].(*domain.ListTOTPMethodsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTOTPMethods indicates an expected call of ListTOTPMethods.
func (mr *MockITOTPControllerMockRecorder) ListTOTPMethods(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTOTPMethods", reflect.TypeOf((*MockITOTPController)(nil).ListTOTPMethods), ctx)
}

// VerifyTOTPCode mocks base method.
func (m *MockITOTPController) VerifyTOTPCode(ctx context.Context, req *domain.VerifyTOTPCodeRequest) (*domain.VerifyTOTPCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyTOTPCode", ctx, req)
	ret0, _ := ret[0].(*domain.VerifyTOTPCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyTOTPCode indicates an expected call of VerifyTOTPCode.
func (mr *MockITOTPControllerMockRecorder) VerifyTOTPCode(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyTOTPCode", reflect.TypeOf((*MockITOTPController)(nil).VerifyTOTPCode), ctx, req)
}
