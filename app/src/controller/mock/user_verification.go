// Code generated by MockGen. DO NOT EDIT.
// Source: user_verification.go
//
// Generated by this command:
//
//	mockgen -source=user_verification.go -destination=./mock/user_verification.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	domain "adaptive-mfa/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserVerificationController is a mock of IUserVerificationController interface.
type MockIUserVerificationController struct {
	ctrl     *gomock.Controller
	recorder *MockIUserVerificationControllerMockRecorder
}

// MockIUserVerificationControllerMockRecorder is the mock recorder for MockIUserVerificationController.
type MockIUserVerificationControllerMockRecorder struct {
	mock *MockIUserVerificationController
}

// NewMockIUserVerificationController creates a new mock instance.
func NewMockIUserVerificationController(ctrl *gomock.Controller) *MockIUserVerificationController {
	mock := &MockIUserVerificationController{ctrl: ctrl}
	mock.recorder = &MockIUserVerificationControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserVerificationController) EXPECT() *MockIUserVerificationControllerMockRecorder {
	return m.recorder
}

// SendEmailVerification mocks base method.
func (m *MockIUserVerificationController) SendEmailVerification(ctx context.Context, req *domain.SendEmailVerificationRequest) (*domain.SendEmailVerificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailVerification", ctx, req)
	ret0, _ := ret[0].(*domain.SendEmailVerificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmailVerification indicates an expected call of SendEmailVerification.
func (mr *MockIUserVerificationControllerMockRecorder) SendEmailVerification(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailVerification", reflect.TypeOf((*MockIUserVerificationController)(nil).SendEmailVerification), ctx, req)
}

// SendPhoneVerification mocks base method.
func (m *MockIUserVerificationController) SendPhoneVerification(ctx context.Context, req *domain.SendPhoneVerificationRequest) (*domain.SendPhoneVerificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPhoneVerification", ctx, req)
	ret0, _ := ret[0].(*domain.SendPhoneVerificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPhoneVerification indicates an expected call of SendPhoneVerification.
func (mr *MockIUserVerificationControllerMockRecorder) SendPhoneVerification(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPhoneVerification", reflect.TypeOf((*MockIUserVerificationController)(nil).SendPhoneVerification), ctx, req)
}

// VerifyEmailVerification mocks base method.
func (m *MockIUserVerificationController) VerifyEmailVerification(ctx context.Context, req *domain.VerifyEmailVerificationRequest) (*domain.VerifyEmailVerificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailVerification", ctx, req)
	ret0, _ := ret[0].(*domain.VerifyEmailVerificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailVerification indicates an expected call of VerifyEmailVerification.
func (mr *MockIUserVerificationControllerMockRecorder) VerifyEmailVerification(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailVerification", reflect.TypeOf((*MockIUserVerificationController)(nil).VerifyEmailVerification), ctx, req)
}

// VerifyPhoneVerification mocks base method.
func (m *MockIUserVerificationController) VerifyPhoneVerification(ctx context.Context, req *domain.VerifyPhoneVerificationRequest) (*domain.VerifyPhoneVerificationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPhoneVerification", ctx, req)
	ret0, _ := ret[0].(*domain.VerifyPhoneVerificationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyPhoneVerification indicates an expected call of VerifyPhoneVerification.
func (mr *MockIUserVerificationControllerMockRecorder) VerifyPhoneVerification(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPhoneVerification", reflect.TypeOf((*MockIUserVerificationController)(nil).VerifyPhoneVerification), ctx, req)
}
