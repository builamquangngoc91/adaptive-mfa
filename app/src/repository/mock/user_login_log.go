// Code generated by MockGen. DO NOT EDIT.
// Source: user_login_log.go
//
// Generated by this command:
//
//	mockgen -source=user_login_log.go -destination=./mock/user_login_log.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	model "adaptive-mfa/model"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserLoginLogRepository is a mock of IUserLoginLogRepository interface.
type MockIUserLoginLogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserLoginLogRepositoryMockRecorder
}

// MockIUserLoginLogRepositoryMockRecorder is the mock recorder for MockIUserLoginLogRepository.
type MockIUserLoginLogRepositoryMockRecorder struct {
	mock *MockIUserLoginLogRepository
}

// NewMockIUserLoginLogRepository creates a new mock instance.
func NewMockIUserLoginLogRepository(ctrl *gomock.Controller) *MockIUserLoginLogRepository {
	mock := &MockIUserLoginLogRepository{ctrl: ctrl}
	mock.recorder = &MockIUserLoginLogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserLoginLogRepository) EXPECT() *MockIUserLoginLogRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserLoginLogRepository) Create(ctx context.Context, tx *sql.Tx, userLoginLog *model.UserLoginLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, userLoginLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUserLoginLogRepositoryMockRecorder) Create(ctx, tx, userLoginLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserLoginLogRepository)(nil).Create), ctx, tx, userLoginLog)
}

// GetAnalysis mocks base method.
func (m *MockIUserLoginLogRepository) GetAnalysis(ctx context.Context, tx *sql.Tx, userID, ipAddress string) (*model.UserLoginLogAnalysis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalysis", ctx, tx, userID, ipAddress)
	ret0, _ := ret[0].(*model.UserLoginLogAnalysis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalysis indicates an expected call of GetAnalysis.
func (mr *MockIUserLoginLogRepositoryMockRecorder) GetAnalysis(ctx, tx, userID, ipAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalysis", reflect.TypeOf((*MockIUserLoginLogRepository)(nil).GetAnalysis), ctx, tx, userID, ipAddress)
}
