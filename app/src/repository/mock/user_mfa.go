// Code generated by MockGen. DO NOT EDIT.
// Source: user_mfa.go
//
// Generated by this command:
//
//	mockgen -source=user_mfa.go -destination=./mock/user_mfa.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	model "adaptive-mfa/model"
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserMFARepository is a mock of IUserMFARepository interface.
type MockIUserMFARepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserMFARepositoryMockRecorder
}

// MockIUserMFARepositoryMockRecorder is the mock recorder for MockIUserMFARepository.
type MockIUserMFARepositoryMockRecorder struct {
	mock *MockIUserMFARepository
}

// NewMockIUserMFARepository creates a new mock instance.
func NewMockIUserMFARepository(ctrl *gomock.Controller) *MockIUserMFARepository {
	mock := &MockIUserMFARepository{ctrl: ctrl}
	mock.recorder = &MockIUserMFARepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserMFARepository) EXPECT() *MockIUserMFARepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserMFARepository) Create(ctx context.Context, tx *sql.Tx, userMFA *model.UserMFA) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, userMFA)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUserMFARepositoryMockRecorder) Create(ctx, tx, userMFA any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserMFARepository)(nil).Create), ctx, tx, userMFA)
}

// GetByUserIDAndMFAType mocks base method.
func (m *MockIUserMFARepository) GetByUserIDAndMFAType(ctx context.Context, tx *sql.Tx, userID, mfaType string) (*model.UserMFA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserIDAndMFAType", ctx, tx, userID, mfaType)
	ret0, _ := ret[0].(*model.UserMFA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserIDAndMFAType indicates an expected call of GetByUserIDAndMFAType.
func (mr *MockIUserMFARepositoryMockRecorder) GetByUserIDAndMFAType(ctx, tx, userID, mfaType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserIDAndMFAType", reflect.TypeOf((*MockIUserMFARepository)(nil).GetByUserIDAndMFAType), ctx, tx, userID, mfaType)
}

// ListByUserID mocks base method.
func (m *MockIUserMFARepository) ListByUserID(ctx context.Context, tx *sql.Tx, userID string) ([]*model.UserMFA, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", ctx, tx, userID)
	ret0, _ := ret[0].([]*model.UserMFA)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockIUserMFARepositoryMockRecorder) ListByUserID(ctx, tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockIUserMFARepository)(nil).ListByUserID), ctx, tx, userID)
}

// SoftDelete mocks base method.
func (m *MockIUserMFARepository) SoftDelete(ctx context.Context, tx *sql.Tx, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockIUserMFARepositoryMockRecorder) SoftDelete(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockIUserMFARepository)(nil).SoftDelete), ctx, tx, id)
}
