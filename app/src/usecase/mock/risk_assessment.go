// Code generated by MockGen. DO NOT EDIT.
// Source: risk_assessment.go
//
// Generated by this command:
//
//	mockgen -source=risk_assessment.go -destination=mock/risk_assessment.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	usecase "adaptive-mfa/usecase"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIRiskAssessmentUsecase is a mock of IRiskAssessmentUsecase interface.
type MockIRiskAssessmentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIRiskAssessmentUsecaseMockRecorder
}

// MockIRiskAssessmentUsecaseMockRecorder is the mock recorder for MockIRiskAssessmentUsecase.
type MockIRiskAssessmentUsecaseMockRecorder struct {
	mock *MockIRiskAssessmentUsecase
}

// NewMockIRiskAssessmentUsecase creates a new mock instance.
func NewMockIRiskAssessmentUsecase(ctrl *gomock.Controller) *MockIRiskAssessmentUsecase {
	mock := &MockIRiskAssessmentUsecase{ctrl: ctrl}
	mock.recorder = &MockIRiskAssessmentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRiskAssessmentUsecase) EXPECT() *MockIRiskAssessmentUsecaseMockRecorder {
	return m.recorder
}

// CalculateScore mocks base method.
func (m *MockIRiskAssessmentUsecase) CalculateScore(ctx context.Context, arg any) (usecase.RiskAssessmentLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateScore", ctx, arg)
	ret0, _ := ret[0].(usecase.RiskAssessmentLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateScore indicates an expected call of CalculateScore.
func (mr *MockIRiskAssessmentUsecaseMockRecorder) CalculateScore(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateScore", reflect.TypeOf((*MockIRiskAssessmentUsecase)(nil).CalculateScore), ctx, arg)
}
